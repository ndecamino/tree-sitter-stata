{
  "$schema": "https://tree-sitter.github.io/tree-sitter/assets/schemas/grammar.schema.json",
  "name": "stata",
  "rules": {
    "source_file": {
      "type": "REPEAT",
      "content": {
        "type": "SYMBOL",
        "name": "_statement"
      }
    },
    "_statement": {
      "type": "CHOICE",
      "members": [
        {
          "type": "SYMBOL",
          "name": "command"
        },
        {
          "type": "SYMBOL",
          "name": "control_flow_structure"
        },
        {
          "type": "SYMBOL",
          "name": "macro_definition"
        },
        {
          "type": "SYMBOL",
          "name": "comment"
        },
        {
          "type": "SYMBOL",
          "name": "empty_statement"
        }
      ]
    },
    "empty_statement": {
      "type": "STRING",
      "value": ";"
    },
    "macro_definition": {
      "type": "PREC_RIGHT",
      "value": "macro",
      "content": {
        "type": "SEQ",
        "members": [
          {
            "type": "STRING",
            "value": "$"
          },
          {
            "type": "SYMBOL",
            "name": "identifier"
          },
          {
            "type": "STRING",
            "value": "="
          },
          {
            "type": "SYMBOL",
            "name": "expression"
          }
        ]
      }
    },
    "macro_reference": {
      "type": "PREC",
      "value": "macro",
      "content": {
        "type": "SEQ",
        "members": [
          {
            "type": "STRING",
            "value": "$"
          },
          {
            "type": "SYMBOL",
            "name": "identifier"
          }
        ]
      }
    },
    "identifier": {
      "type": "PATTERN",
      "value": "[a-zA-Z_][a-zA-Z0-9_]*"
    },
    "command": {
      "type": "PREC_LEFT",
      "value": "command",
      "content": {
        "type": "SEQ",
        "members": [
          {
            "type": "CHOICE",
            "members": [
              {
                "type": "SEQ",
                "members": [
                  {
                    "type": "STRING",
                    "value": "by"
                  },
                  {
                    "type": "SYMBOL",
                    "name": "varlist"
                  },
                  {
                    "type": "STRING",
                    "value": ":"
                  }
                ]
              },
              {
                "type": "BLANK"
              }
            ]
          },
          {
            "type": "SYMBOL",
            "name": "_command_with_args"
          }
        ]
      }
    },
    "_command_with_args": {
      "type": "PREC_LEFT",
      "value": 0,
      "content": {
        "type": "SEQ",
        "members": [
          {
            "type": "SYMBOL",
            "name": "stata_command"
          },
          {
            "type": "CHOICE",
            "members": [
              {
                "type": "SYMBOL",
                "name": "varlist"
              },
              {
                "type": "BLANK"
              }
            ]
          },
          {
            "type": "CHOICE",
            "members": [
              {
                "type": "SEQ",
                "members": [
                  {
                    "type": "STRING",
                    "value": "="
                  },
                  {
                    "type": "SYMBOL",
                    "name": "expression"
                  }
                ]
              },
              {
                "type": "BLANK"
              }
            ]
          },
          {
            "type": "REPEAT",
            "content": {
              "type": "CHOICE",
              "members": [
                {
                  "type": "SYMBOL",
                  "name": "if_qualifier"
                },
                {
                  "type": "SYMBOL",
                  "name": "in_qualifier"
                },
                {
                  "type": "SYMBOL",
                  "name": "weight_qualifier"
                },
                {
                  "type": "SYMBOL",
                  "name": "options_qualifier"
                }
              ]
            }
          }
        ]
      }
    },
    "if_qualifier": {
      "type": "PREC",
      "value": "qualifier",
      "content": {
        "type": "SEQ",
        "members": [
          {
            "type": "STRING",
            "value": "if"
          },
          {
            "type": "SYMBOL",
            "name": "expression"
          }
        ]
      }
    },
    "in_qualifier": {
      "type": "PREC",
      "value": "qualifier",
      "content": {
        "type": "SEQ",
        "members": [
          {
            "type": "STRING",
            "value": "in"
          },
          {
            "type": "SYMBOL",
            "name": "range"
          }
        ]
      }
    },
    "weight_qualifier": {
      "type": "PREC",
      "value": "qualifier",
      "content": {
        "type": "SEQ",
        "members": [
          {
            "type": "STRING",
            "value": "weight"
          },
          {
            "type": "SYMBOL",
            "name": "expression"
          }
        ]
      }
    },
    "options_qualifier": {
      "type": "PREC",
      "value": "qualifier",
      "content": {
        "type": "SEQ",
        "members": [
          {
            "type": "STRING",
            "value": ","
          },
          {
            "type": "PREC_LEFT",
            "value": "options",
            "content": {
              "type": "SYMBOL",
              "name": "options"
            }
          }
        ]
      }
    },
    "stata_command": {
      "type": "SYMBOL",
      "name": "identifier"
    },
    "varlist": {
      "type": "PREC_LEFT",
      "value": 0,
      "content": {
        "type": "REPEAT1",
        "content": {
          "type": "CHOICE",
          "members": [
            {
              "type": "SYMBOL",
              "name": "identifier"
            },
            {
              "type": "SYMBOL",
              "name": "macro_reference"
            }
          ]
        }
      }
    },
    "comment": {
      "type": "TOKEN",
      "content": {
        "type": "CHOICE",
        "members": [
          {
            "type": "SEQ",
            "members": [
              {
                "type": "STRING",
                "value": "//"
              },
              {
                "type": "PATTERN",
                "value": ".*"
              }
            ]
          },
          {
            "type": "SEQ",
            "members": [
              {
                "type": "STRING",
                "value": "/*"
              },
              {
                "type": "PATTERN",
                "value": "[^*]*\\*+([^/*][^*]*\\*+)*"
              },
              {
                "type": "STRING",
                "value": "/"
              }
            ]
          }
        ]
      }
    },
    "control_flow_structure": {
      "type": "CHOICE",
      "members": [
        {
          "type": "SYMBOL",
          "name": "if_structure"
        },
        {
          "type": "SYMBOL",
          "name": "for_structure"
        }
      ]
    },
    "if_structure": {
      "type": "SEQ",
      "members": [
        {
          "type": "STRING",
          "value": "if"
        },
        {
          "type": "SYMBOL",
          "name": "expression"
        },
        {
          "type": "STRING",
          "value": "{"
        },
        {
          "type": "REPEAT",
          "content": {
            "type": "SYMBOL",
            "name": "_statement"
          }
        },
        {
          "type": "STRING",
          "value": "}"
        },
        {
          "type": "CHOICE",
          "members": [
            {
              "type": "SEQ",
              "members": [
                {
                  "type": "STRING",
                  "value": "else"
                },
                {
                  "type": "STRING",
                  "value": "{"
                },
                {
                  "type": "REPEAT",
                  "content": {
                    "type": "SYMBOL",
                    "name": "_statement"
                  }
                },
                {
                  "type": "STRING",
                  "value": "}"
                }
              ]
            },
            {
              "type": "BLANK"
            }
          ]
        }
      ]
    },
    "for_structure": {
      "type": "SEQ",
      "members": [
        {
          "type": "STRING",
          "value": "forvalues"
        },
        {
          "type": "SYMBOL",
          "name": "identifier"
        },
        {
          "type": "STRING",
          "value": "="
        },
        {
          "type": "SYMBOL",
          "name": "range"
        },
        {
          "type": "STRING",
          "value": "{"
        },
        {
          "type": "REPEAT",
          "content": {
            "type": "SYMBOL",
            "name": "_statement"
          }
        },
        {
          "type": "STRING",
          "value": "}"
        }
      ]
    },
    "expression": {
      "type": "CHOICE",
      "members": [
        {
          "type": "SYMBOL",
          "name": "identifier"
        },
        {
          "type": "SYMBOL",
          "name": "number"
        },
        {
          "type": "SYMBOL",
          "name": "string"
        },
        {
          "type": "SYMBOL",
          "name": "macro_reference"
        },
        {
          "type": "SYMBOL",
          "name": "binary_expression"
        }
      ]
    },
    "binary_expression": {
      "type": "PREC_LEFT",
      "value": 1,
      "content": {
        "type": "SEQ",
        "members": [
          {
            "type": "FIELD",
            "name": "left",
            "content": {
              "type": "SYMBOL",
              "name": "expression"
            }
          },
          {
            "type": "FIELD",
            "name": "operator",
            "content": {
              "type": "CHOICE",
              "members": [
                {
                  "type": "STRING",
                  "value": ">"
                },
                {
                  "type": "STRING",
                  "value": "<"
                },
                {
                  "type": "STRING",
                  "value": ">="
                },
                {
                  "type": "STRING",
                  "value": "<="
                },
                {
                  "type": "STRING",
                  "value": "=="
                },
                {
                  "type": "STRING",
                  "value": "!="
                },
                {
                  "type": "STRING",
                  "value": "+"
                },
                {
                  "type": "STRING",
                  "value": "-"
                },
                {
                  "type": "STRING",
                  "value": "*"
                },
                {
                  "type": "STRING",
                  "value": "/"
                }
              ]
            }
          },
          {
            "type": "FIELD",
            "name": "right",
            "content": {
              "type": "SYMBOL",
              "name": "expression"
            }
          }
        ]
      }
    },
    "number": {
      "type": "PATTERN",
      "value": "[0-9]+(\\.[0-9]+)?"
    },
    "string": {
      "type": "CHOICE",
      "members": [
        {
          "type": "SEQ",
          "members": [
            {
              "type": "STRING",
              "value": "\""
            },
            {
              "type": "PATTERN",
              "value": "[^\"]*"
            },
            {
              "type": "STRING",
              "value": "\""
            }
          ]
        },
        {
          "type": "SEQ",
          "members": [
            {
              "type": "STRING",
              "value": "'"
            },
            {
              "type": "PATTERN",
              "value": "[^\\']*"
            },
            {
              "type": "STRING",
              "value": "'"
            }
          ]
        }
      ]
    },
    "range": {
      "type": "PATTERN",
      "value": "\\d+\\s*(-|\\/)\\s*\\d+"
    },
    "options": {
      "type": "PREC_LEFT",
      "value": "options",
      "content": {
        "type": "SEQ",
        "members": [
          {
            "type": "SYMBOL",
            "name": "option"
          },
          {
            "type": "REPEAT",
            "content": {
              "type": "SEQ",
              "members": [
                {
                  "type": "STRING",
                  "value": ","
                },
                {
                  "type": "SYMBOL",
                  "name": "option"
                }
              ]
            }
          }
        ]
      }
    },
    "option": {
      "type": "CHOICE",
      "members": [
        {
          "type": "SYMBOL",
          "name": "identifier"
        },
        {
          "type": "SEQ",
          "members": [
            {
              "type": "SYMBOL",
              "name": "identifier"
            },
            {
              "type": "STRING",
              "value": "("
            },
            {
              "type": "SYMBOL",
              "name": "expression"
            },
            {
              "type": "STRING",
              "value": ")"
            }
          ]
        }
      ]
    }
  },
  "extras": [
    {
      "type": "SYMBOL",
      "name": "comment"
    },
    {
      "type": "PATTERN",
      "value": "\\s"
    }
  ],
  "conflicts": [
    [
      "_command_with_args",
      "stata_command"
    ],
    [
      "varlist",
      "macro_reference"
    ],
    [
      "option",
      "options"
    ]
  ],
  "precedences": [
    [
      {
        "type": "STRING",
        "value": "command"
      },
      {
        "type": "STRING",
        "value": "macro"
      }
    ],
    [
      {
        "type": "STRING",
        "value": "options"
      },
      {
        "type": "STRING",
        "value": "qualifier"
      }
    ]
  ],
  "externals": [],
  "inline": [],
  "supertypes": [],
  "reserved": {}
}